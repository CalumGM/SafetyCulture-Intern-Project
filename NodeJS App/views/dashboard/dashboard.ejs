<head>
    <style type="text/css">
        #map {
          height: 80%;
        }

    </style>
    <script src ="https://polyfill.io/v3/polyfill.min.js?features=default" ></script>
    <script src ="https://maps.googleapis.com/maps/api/js?key=AIzaSyAtMoG5td5VLKdTtalSQ2umxDQujfr4_LA&callback=initMap&libraries=visualization&v=weekly" defer></script>
</head>
<%- include('../_partial/_header'); -%>
<div class="row">
    <div class="col-md-10">
        <h2>Agency Performance</h2>
    </div>
    <div class="col-md-2">
                <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" fill="#0d6efd" class="bi bi-calendar-fill" viewBox="0 0 24 24">
                  <path fill-rule="evenodd" d="M3.5 0a.5.5 0 0 1 .5.5V1h8V.5a.5.5 0 0 1 1 0V1h1a2 2 0 0 1 2 2v11a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V3a2 2 0 0 1 2-2h1V.5a.5.5 0 0 1 .5-.5zM2 3.5c0-.276.244-.5.545-.5h10.91c.3 0 .545.224.545.5v1c0 .276-.244.5-.546.5H2.545C2.245 5 2 4.776 2 4.5v-1zm7.336 9.29c-1.11 0-1.656-.767-1.703-1.407h.683c.043.37.387.82 1.051.82.844 0 1.301-.848 1.305-2.164h-.027c-.153.414-.637.79-1.383.79-.852 0-1.676-.61-1.676-1.77 0-1.137.871-1.809 1.797-1.809 1.172 0 1.953.734 1.953 2.668 0 1.805-.742 2.871-2 2.871zm.066-2.544c.625 0 1.184-.484 1.184-1.18 0-.832-.527-1.23-1.16-1.23-.586 0-1.168.387-1.168 1.21 0 .817.543 1.2 1.144 1.2zm-2.957-2.89v5.332H5.77v-4.61h-.012c-.29.156-.883.52-1.258.777V8.16a12.6 12.6 0 0 1 1.313-.805h.632z"/>

                </svg>
            <input type="text" name="daterange" size=25 id="daterange"></input>
    </div>
</div>

<div class="row">
    <div class="col-md-6 col-sm-12">
        <div class="agent_performance">
            <h4>Total Inspections</h4>
            <canvas id="agent_performance_chart"></canvas>
        </div>
    </div>
    <div class="col-md-6 col-sm-12">
        <div class="team_performance">
            <h4>Inspections by Day</h4>
            <canvas id="team_performance_chart"></canvas>
        </div>
    </div>
</div>
<div class="row">
    <div class="col-md-6 col-sm-12">
        <h4>Property Rating Alignment</h4>
        <div class="agent_alignment">
            <canvas id="agent_alignment_chart"></canvas>
        </div>
    </div>
    <div class="col-md-6 col-sm-12">
        <h4>Problem Area Map</h4>
        <div class="team_hotspots">
            <div id="map"></div>
            </p>
        </div>
    </div>
</div>
<row><br/><br/></row>
<script> // declare the full dataset
    var dashboard_data =  JSON.parse(<%-"'"+dashboard_data+"'" %>)
</script>
<script>
    let map;

    function initMap() {
        map = new google.maps.Map(document.getElementById("map"), {
            center: { lat: -19.305, lng: 146.747 },
            zoom: 13,
            mapTypeId: "terrain",
        });
        console.log(dashboard_data['audit_location_data'])
        draw_heatmap(dashboard_data['audit_location_data']);
    }

    const draw_heatmap = function(results) {
        heatmapData = [];
        for (let i = 0; i < results.length; i++) {
            const coords = results[i];
            const point = {location: new google.maps.LatLng(parseFloat(coords[0]), parseFloat(coords[1])), weight: parseFloat(coords[2])};
            
            heatmapData.push(point);
        }
        const heatmap = new google.maps.visualization.HeatmapLayer({
            data: heatmapData,
            dissipating: true,
            map: map
        });
    };
</script>
<script> 
    // graph plotting using Chartjs
    var agentPerformanceJS = document.getElementById('agent_performance_chart').getContext('2d');
    var teamPerformanceJS = document.getElementById('team_performance_chart').getContext('2d');
    var agentAlignmentJS = document.getElementById('agent_alignment_chart').getContext('2d');
    // Global Options
    Chart.defaults.global.defaultFontFamily.Chart = 'Lato';
    Chart.defaults.global.defaultFontSize.Chart = 18;
    Chart.defaults.global.defaultFontColor.Chart = '#000';
    Chart.defaults.global.hover.mode = 'nearest';

    agentPerformanceChartData = {
                labels: dashboard_data['agent_names'],
                datasets: [{
                    label: '# of Inspections Completed',
                    data: dashboard_data['agent_totals'],
                    backgroundColor: [
                        'rgba(255, 99, 132, 0.2)',
                        'rgba(54, 162, 235, 0.2)',
                        'rgba(255, 206, 86, 0.2)',
                        'rgba(75, 192, 192, 0.2)',
                        'rgba(153, 102, 255, 0.2)',
                        'rgba(255, 159, 64, 0.2)'
                    ],
                    borderColor: [
                        'rgba(255, 99, 132, 1)',
                        'rgba(54, 162, 235, 1)',
                        'rgba(255, 206, 86, 1)',
                        'rgba(75, 192, 192, 1)',
                        'rgba(153, 102, 255, 1)',
                        'rgba(255, 159, 64, 1)'
                    ],
                    borderWidth: 1
                }]
            };
    agentPerformanceChartOptions = {
                legend:{
                    display: false, // set to true to show the legend
                    position:'right',
                    labels:{
                        fontColor: '#000'
                    }
                },
                layout:{
                    padding:{
                        left:0, right:0, bottom:0, top:0
                    }
                },
                scales: {
                yAxes: [{
                    ticks: {
                        beginAtZero: true
                    }
                }]
                }
            };

    alignmentChartData = {
                labels: dashboard_data['agent_names'],
                datasets: [{
                    label: 'Relative Property Score',
                    data: dashboard_data['agent_rel_scores'],
                    backgroundColor: [
                        'rgba(255, 99, 132, 0.2)',
                        'rgba(54, 162, 235, 0.2)',
                        'rgba(255, 206, 86, 0.2)',
                        'rgba(75, 192, 192, 0.2)',
                        'rgba(153, 102, 255, 0.2)',
                        'rgba(255, 159, 64, 0.2)'
                    ],
                    borderColor: [
                        'rgba(255, 99, 132, 1)',
                        'rgba(54, 162, 235, 1)',
                        'rgba(255, 206, 86, 1)',
                        'rgba(75, 192, 192, 1)',
                        'rgba(153, 102, 255, 1)',
                        'rgba(255, 159, 64, 1)'
                    ],
                    borderWidth: 1
                }]
            };
    alignmentChartOptions = {
                legend:{
                    display: false, // set to true to show the legend
                    position:'right',
                    labels:{
                        fontColor: '#000'
                    }
                },
                layout:{
                    padding:{
                        left:0, right:0, bottom:0, top:0
                    }
                },
                scales: {
                yAxes: [{
                    ticks: {
                        beginAtZero: true
                    }
                }]
                }
            };
    lineChartData = {
                labels: dashboard_data['day_labels'],
                datasets: [{
                    label: 'Relative Property Score',
                    data: dashboard_data['daily_audit_count'],
                    backgroundColor: [
                        'rgba(255, 99, 132, 0.2)',
                        'rgba(54, 162, 235, 0.2)',
                        'rgba(255, 206, 86, 0.2)',
                        'rgba(75, 192, 192, 0.2)',
                        'rgba(153, 102, 255, 0.2)',
                        'rgba(255, 159, 64, 0.2)'
                    ],
                    borderColor: [
                        'rgba(255, 99, 132, 1)',
                        'rgba(54, 162, 235, 1)',
                        'rgba(255, 206, 86, 1)',
                        'rgba(75, 192, 192, 1)',
                        'rgba(153, 102, 255, 1)',
                        'rgba(255, 159, 64, 1)'
                    ],
                    borderWidth: 3
                }]
            };
    lineChartOptions = {
                legend:{
                    display: false, // set to true to show the legend
                    position:'right',
                    labels:{
                        fontColor: '#000'
                    }
                },
                layout:{
                    padding:{
                        left:0, right:0, bottom:0, top:0
                    }
                },
                scales: {
                    yAxes: [{
                        ticks: {
                            beginAtZero: true
                        }
                    }]
                }
            };
    var agentPerformance = new Chart(agentPerformanceJS, {
        type:'bar', // bar, horizontal, pie, line, doughnut, radar, polarArea
        data:agentPerformanceChartData,
        options:agentPerformanceChartOptions
    });
    var teamPerformance = new Chart(teamPerformanceJS, {
        type: 'line',
        data: lineChartData,
        options: lineChartOptions
    });
    var agentAlignment = new Chart(agentAlignmentJS, {
        type: 'bar',
        data:alignmentChartData,
        options:alignmentChartOptions
    });
</script>

<script> // script for date range
    
    var start_date, end_date;
    const monthNames = ["January", "February", "March", "April", "May", "June",
        "July", "August", "September", "October", "November", "December"];
    var dateObj = new Date();
    var month = dateObj.getMonth();
    var day = dateObj.getDate();
    var year = dateObj.getFullYear();
    var current_date = new Date(year + '-' + month + '-' + day);
    var min_date = new Date();
    // Arbitarily 180 days backwards
    min_date.setTime(current_date.getTime()-1000*60*60*24*180)
    // change text string in HMTL div
    document.getElementById('daterange');
    $(function() {
        $('input[name="daterange"]').daterangepicker({
            dateFormat: "yyyy-mm-dd",
            minDate: new Date("2020-07-18"),
            maxDate: new Date("2020-12-18"),
            startDate: new Date("2020-11-18"),
            endDate: new Date("2020-12-18"),
            locale: {
                format: "DD/MMM/YY"
            },
            dateFormat: "YYYY-MM-DD",
            opens: 'left'
            }, function(start, end, label) {
            // start and end are the two dates selected on the GUI
            start_date = start.format('YYYY-MM-DD'); // moment object
            end_date = end.format('YYYY-MM-DD');
            window.location = "/dashboard/"+start_date+"/"+end_date;           
        });
    });
    defaultDate = new Date(2013,05,17);
</script>
<%- include ('../_partial/_footer'); -%>