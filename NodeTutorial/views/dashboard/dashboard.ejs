<head>
    <style type="text/css">
        #map {
          height: 100%;
        }
    </style>
    <script src ="https://polyfill.io/v3/polyfill.min.js?features=default" ></script>
    <script src ="https://maps.googleapis.com/maps/api/js?key=AIzaSyAtMoG5td5VLKdTtalSQ2umxDQujfr4_LA&callback=initMap&libraries=visualization&v=weekly" defer></script>
</head>
<%- include('../_partial/_header'); -%>
<div class="row">
    <div class="col-12">
        <h1>Data overview</h1>
    </div>
</div>

<div class="row">
    <div class="col-10" style="margin-bottom:10px;">
        <!-- <a href="/posts/add" type="button" class="btn btn-default">New Post</a> -->
        <!-- <a href="/posts/view" type="button" class="btn btn-default">View Audits</a> -->
    </div>
    <div class="col-2">
        <input type="text" name="daterange" id="daterange"/>
    </div>
</div>
<div class="row">
    <div class="col-6">
        <div class="agent_performance">
            <canvas id="agent_performance_chart"></canvas>
        </div>
    </div>
    <div class="col-6">
        <div class="team_performance">
            <canvas id="team_performance_chart"></canvas>
        </div>
    </div>
</div>
<div class="row">
    <div class="col-6">
        <div class="agent_alignment">
            <canvas id="agent_alignment_chart"></canvas>
        </div>
    </div>
    <div class="col-6">
        <div class="team_hotspots">
            <div id="map"></div>
            </p>
        </div>
    </div>
</div>
<script> // declare the full dataset
    var dashboard_data =  JSON.parse(<%-"'"+dashboard_data+"'"%>)
</script>
<script>
    let map;

    function initMap() {
        map = new google.maps.Map(document.getElementById("map"), {
            center: { lat: -19.305, lng: 146.747 },
            zoom: 13,
            mapTypeId: "terrain",
        });
        console.log(dashboard_data['audit_location_data'])
        draw_heatmap(dashboard_data['audit_location_data']);
    }

    const draw_heatmap = function(results) {
        heatmapData = [];
        for (let i = 0; i < results.length; i++) {
            const coords = results[i];
            const latLng = new google.maps.LatLng(parseFloat(coords[0]), parseFloat(coords[1]));
            heatmapData.push(latLng);
        }
        const heatmap = new google.maps.visualization.HeatmapLayer({
            data: heatmapData,
            dissipating: true,
            map: map,
        });
    };
</script>
<script> 
    // graph plotting using Chartjs
    var agentPerformanceJS = document.getElementById('agent_performance_chart').getContext('2d');
    var teamPerformanceJS = document.getElementById('team_performance_chart').getContext('2d');
    var agentAlignmentJS = document.getElementById('agent_alignment_chart').getContext('2d');
    // Global Options
    Chart.defaults.global.defaultFontFamily.Chart = 'Lato';
    Chart.defaults.global.defaultFontSize.Chart = 18;
    Chart.defaults.global.defaultFontColor.Chart = '#000';
    Chart.defaults.global.hover.mode = 'nearest';

    agentPerformanceChartData = {
                labels: dashboard_data['agent_names'],
                datasets: [{
                    label: '# of Inspections Completed',
                    data: dashboard_data['agent_totals'],
                    backgroundColor: [
                        'rgba(255, 99, 132, 0.2)',
                        'rgba(54, 162, 235, 0.2)',
                        'rgba(255, 206, 86, 0.2)',
                        'rgba(75, 192, 192, 0.2)',
                        'rgba(153, 102, 255, 0.2)',
                        'rgba(255, 159, 64, 0.2)'
                    ],
                    borderColor: [
                        'rgba(255, 99, 132, 1)',
                        'rgba(54, 162, 235, 1)',
                        'rgba(255, 206, 86, 1)',
                        'rgba(75, 192, 192, 1)',
                        'rgba(153, 102, 255, 1)',
                        'rgba(255, 159, 64, 1)'
                    ],
                    borderWidth: 1
                }]
            };
    agentPerformanceChartOptions = {
                title:{
                    display:true,
                    text:'Agent Overall Inspections',
                    fontSize: 25,
                    fontColor: '#000'
                },
                legend:{
                    display: false, // set to true to show the legend
                    position:'right',
                    labels:{
                        fontColor: '#000'
                    }
                },
                layout:{
                    padding:{
                        left:0, right:0, bottom:0, top:0
                    }
                },
                scales: {
                yAxes: [{
                    ticks: {
                        beginAtZero: true
                    }
                }]
                }
            };

    alignmentChartData = {
                labels: dashboard_data['agent_names'],
                datasets: [{
                    label: 'Relative Property Score',
                    data: dashboard_data['agent_rel_scores'],
                    backgroundColor: [
                        'rgba(255, 99, 132, 0.2)',
                        'rgba(54, 162, 235, 0.2)',
                        'rgba(255, 206, 86, 0.2)',
                        'rgba(75, 192, 192, 0.2)',
                        'rgba(153, 102, 255, 0.2)',
                        'rgba(255, 159, 64, 0.2)'
                    ],
                    borderColor: [
                        'rgba(255, 99, 132, 1)',
                        'rgba(54, 162, 235, 1)',
                        'rgba(255, 206, 86, 1)',
                        'rgba(75, 192, 192, 1)',
                        'rgba(153, 102, 255, 1)',
                        'rgba(255, 159, 64, 1)'
                    ],
                    borderWidth: 1
                }]
            };
    alignmentChartOptions = {
                title:{
                    display:true,
                    text:'Agent Inpection Score Alignment',
                    fontSize: 25,
                    fontColor: '#000'
                },
                legend:{
                    display: false, // set to true to show the legend
                    position:'right',
                    labels:{
                        fontColor: '#000'
                    }
                },
                layout:{
                    padding:{
                        left:0, right:0, bottom:0, top:0
                    }
                },
                scales: {
                yAxes: [{
                    ticks: {
                        beginAtZero: true
                    }
                }]
                }
            };
    lineChartData = {
                labels: dashboard_data['day_labels'],
                datasets: [{
                    label: 'Relative Property Score',
                    data: dashboard_data['daily_audit_count'],
                    backgroundColor: [
                        'rgba(255, 99, 132, 0.2)',
                        'rgba(54, 162, 235, 0.2)',
                        'rgba(255, 206, 86, 0.2)',
                        'rgba(75, 192, 192, 0.2)',
                        'rgba(153, 102, 255, 0.2)',
                        'rgba(255, 159, 64, 0.2)'
                    ],
                    borderColor: [
                        'rgba(255, 99, 132, 1)',
                        'rgba(54, 162, 235, 1)',
                        'rgba(255, 206, 86, 1)',
                        'rgba(75, 192, 192, 1)',
                        'rgba(153, 102, 255, 1)',
                        'rgba(255, 159, 64, 1)'
                    ],
                    borderWidth: 3
                }]
            };
    lineChartOptions = {
                title:{
                    display:true,
                    text:'Team Daily Inspection Performance',
                    fontSize: 26,
                    fontColor: '#000'
                },
                legend:{
                    display: false, // set to true to show the legend
                    position:'right',
                    labels:{
                        fontColor: '#000'
                    }
                },
                layout:{
                    padding:{
                        left:0, right:0, bottom:0, top:0
                    }
                },
                scales: {
                    yAxes: [{
                        ticks: {
                            beginAtZero: true
                        }
                    }]
                }
            };
    var agentPerformance = new Chart(agentPerformanceJS, {
        type:'bar', // bar, horizontal, pie, line, doughnut, radar, polarArea
        data:agentPerformanceChartData,
        options:agentPerformanceChartOptions
    });
    var teamPerformance = new Chart(teamPerformanceJS, {
        type: 'line',
        data: lineChartData,
        options: lineChartOptions
    });
    var agentAlignment = new Chart(agentAlignmentJS, {
        type: 'bar',
        data:alignmentChartData,
        options:alignmentChartOptions
    });
</script>

<script> // script for date range
    
    var start_date, end_date;
    const monthNames = ["January", "February", "March", "April", "May", "June",
        "July", "August", "September", "October", "November", "December"];
    var dateObj = new Date();
    var month = dateObj.getMonth()+1;
    var day = String(dateObj.getDate()).padStart(2, '0');
    var year = dateObj.getFullYear();
    var current_date = new Date(year + '-' + month + '-' + day);
    var min_date = new Date();
    // Arbitarily 180 days backwards
    min_date.setTime(current_date.getTime() - 1000*60*60*24* 180)
    // change text string in HMTL div
    document.getElementById('daterange').innerHTML = 'test';
    $(function() {
        $('input[name="daterange"]').daterangepicker({
            dateFormat: "yy-mm-dd",
            minDate: new Date(min_date),
            maxDate: new Date(current_date),
            opens: 'left'
            }, function(start, end, label) {
            // start and end are the two dates selected on the GUI
            start_date = start.format('YYYY-MM-DD'); // moment object
            end_date = end.format('YYYY-MM-DD');
            console.log('Dates:',start_date,end_date)
            //update map
            //console.log(dashboard_data['audit_location_data'])
            //draw_heatmap(dashboard_data['audit_location_data'])
            window.location = "/dashboard/"+start_date+"/"+end_date;
            
        });
    });

</script>

<%- include ('../_partial/_footer'); -%>